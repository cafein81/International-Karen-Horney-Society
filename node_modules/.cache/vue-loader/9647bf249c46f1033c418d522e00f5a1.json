{"remainingRequest":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vuetify-audio/src/vuetifyaudio.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vuetify-audio/src/vuetifyaudio.vue","mtime":1497519136000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst formatTime = (secend) => {\n    let time = new Date(secend * 1000).toISOString().substr(11, 8)\n    return time\n}\nexport default {\n    name: 'vuetify-audio',\n    props: {\n        file: {\n            type: String,\n            default: null\n        },\n        autoPlay: {\n            type: Boolean,\n            default: false\n        },\n        ended: {\n            type: Function,\n            default: () => {},\n        },\n        canPlay: {\n            type: Function,\n            default: () => {},\n        },\n    },\n    computed: {\n        duration: function () {\n            return this.audio ? formatTime(this.totalDuration) : ''\n        },\n    },\n    data () {\n        return {\n            isMuted: false,\n            loaded: false,\n            playing: false,\n            paused: false,\n            percentage: 0,\n            currentTime: '00:00:00',\n            audio: undefined,\n            totalDuration: 0,\n        }\n    },\n\n    methods: {\n        setPosition () {\n            this.audio.currentTime = parseInt(this.audio.duration / 100 * this.percentage);\n        },\n        stop () {\n            this.paused = this.playing = false\n            this.audio.pause()\n            this.audio.currentTime = 0\n        },\n        play () {\n            if (this.playing) return\n            this.paused = false\n            this.audio.play()\n            this.playing = true\n        },\n        pause () {\n            this.paused = !this.paused;\n            (this.paused) ? this.audio.pause() : this.audio.play()\n        },\n        download () {\n            this.audio.pause()\n            window.open(this.file, 'download')\n        },\n        mute () {\n            this.isMuted = !this.isMuted\n            this.audio.muted = this.isMuted\n            this.volumeValue = this.isMuted ? 0 : 75\n        },\n        reload () {\n            this.audio.load();\n        },\n        _handleLoaded: function () {\n            if (this.audio.readyState >= 2) {\n                if (this.autoPlay) this.audio.play()\n                this.loaded = true\n                this.totalDuration = parseInt(this.audio.duration)\n            } else {\n                throw new Error('Failed to load sound file')\n            }\n        },\n        _handlePlayingUI: function (e) {\n            this.percentage = this.audio.currentTime / this.audio.duration * 100\n            this.currentTime = formatTime(this.audio.currentTime)\n        },\n        _handlePlayPause: function (e) {\n            if (e.type === 'pause' && this.paused === false && this.playing === false) {\n                this.currentTime = '00:00:00'\n            }\n        },\n        _handleEnded () {\n            this.paused = this.playing = false;\n        },\n        init: function () {\n            this.audio.addEventListener('timeupdate', this._handlePlayingUI);\n            this.audio.addEventListener('loadeddata', this._handleLoaded);\n            this.audio.addEventListener('pause', this._handlePlayPause);\n            this.audio.addEventListener('play', this._handlePlayPause);\n            this.audio.addEventListener('ended', this._handleEnded);\n        },\n    },\n    mounted () {\n        this.audio = this.$refs.player;\n        this.init();\n    },\n    beforeDestroy () {\n        this.audio.removeEventListener('timeupdate', this._handlePlayingUI)\n        this.audio.removeEventListener('loadeddata', this._handleLoaded)\n        this.audio.removeEventListener('pause', this._handlePlayPause)\n        this.audio.removeEventListener('play', this._handlePlayPause)\n        this.audio.removeEventListener('ended', this._handleEnded);\n    }\n\n}\n",{"version":3,"sources":["vuetifyaudio.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"vuetifyaudio.vue","sourceRoot":"node_modules/vuetify-audio/src","sourcesContent":["<template>\r\n    <v-card style=\"text-align: center\">\r\n        <v-card-text>\r\n            <v-btn outline icon class=\"teal--text\" @click.native=\"playing ? pause() : play()\" :disabled=\"loaded === false\">\r\n                <v-icon v-if=\"playing === false || paused === true\">play_arrow</v-icon>\r\n                <v-icon v-else>pause</v-icon>\r\n            </v-btn>\r\n            <v-btn outline icon class=\"teal--text\" @click.native=\"stop()\" :disabled=\"loaded === false\">\r\n                <v-icon>stop</v-icon>\r\n            </v-btn>\r\n            <v-btn outline icon class=\"teal--text\" @click.native=\"mute()\" :disabled=\"loaded === false\">\r\n                <v-icon v-if=\"isMuted === false\">volume_up</v-icon>\r\n                <v-icon v-else>volume_off</v-icon>\r\n            </v-btn>\r\n            <v-btn outline icon class=\"teal--text\" @click.native=\"loaded ? download() : reload()\">\r\n                <v-icon v-if=\"loaded === false\">refresh</v-icon>\r\n                <v-icon v-else>get_app</v-icon>\r\n            </v-btn>\r\n            <v-slider @click.native=\"setPosition()\" v-model=\"percentage\" dark></v-slider>\r\n            <p>{{ currentTime }} / {{ duration }}</p>\r\n        </v-card-text>\r\n        <audio id=\"player\" ref=\"player\" v-on:ended=\"ended\" v-on:canplay=\"canPlay\" :src=\"file\"></audio>\r\n    </v-card>\r\n</template>\r\n<script>\r\n    const formatTime = (secend) => {\r\n        let time = new Date(secend * 1000).toISOString().substr(11, 8)\r\n        return time\r\n    }\r\n    export default {\r\n        name: 'vuetify-audio',\r\n        props: {\r\n            file: {\r\n                type: String,\r\n                default: null\r\n            },\r\n            autoPlay: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            ended: {\r\n                type: Function,\r\n                default: () => {},\r\n            },\r\n            canPlay: {\r\n                type: Function,\r\n                default: () => {},\r\n            },\r\n        },\r\n        computed: {\r\n            duration: function () {\r\n                return this.audio ? formatTime(this.totalDuration) : ''\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isMuted: false,\r\n                loaded: false,\r\n                playing: false,\r\n                paused: false,\r\n                percentage: 0,\r\n                currentTime: '00:00:00',\r\n                audio: undefined,\r\n                totalDuration: 0,\r\n            }\r\n        },\r\n\r\n        methods: {\r\n            setPosition () {\r\n                this.audio.currentTime = parseInt(this.audio.duration / 100 * this.percentage);\r\n            },\r\n            stop () {\r\n                this.paused = this.playing = false\r\n                this.audio.pause()\r\n                this.audio.currentTime = 0\r\n            },\r\n            play () {\r\n                if (this.playing) return\r\n                this.paused = false\r\n                this.audio.play()\r\n                this.playing = true\r\n            },\r\n            pause () {\r\n                this.paused = !this.paused;\r\n                (this.paused) ? this.audio.pause() : this.audio.play()\r\n            },\r\n            download () {\r\n                this.audio.pause()\r\n                window.open(this.file, 'download')\r\n            },\r\n            mute () {\r\n                this.isMuted = !this.isMuted\r\n                this.audio.muted = this.isMuted\r\n                this.volumeValue = this.isMuted ? 0 : 75\r\n            },\r\n            reload () {\r\n                this.audio.load();\r\n            },\r\n            _handleLoaded: function () {\r\n                if (this.audio.readyState >= 2) {\r\n                    if (this.autoPlay) this.audio.play()\r\n                    this.loaded = true\r\n                    this.totalDuration = parseInt(this.audio.duration)\r\n                } else {\r\n                    throw new Error('Failed to load sound file')\r\n                }\r\n            },\r\n            _handlePlayingUI: function (e) {\r\n                this.percentage = this.audio.currentTime / this.audio.duration * 100\r\n                this.currentTime = formatTime(this.audio.currentTime)\r\n            },\r\n            _handlePlayPause: function (e) {\r\n                if (e.type === 'pause' && this.paused === false && this.playing === false) {\r\n                    this.currentTime = '00:00:00'\r\n                }\r\n            },\r\n            _handleEnded () {\r\n                this.paused = this.playing = false;\r\n            },\r\n            init: function () {\r\n                this.audio.addEventListener('timeupdate', this._handlePlayingUI);\r\n                this.audio.addEventListener('loadeddata', this._handleLoaded);\r\n                this.audio.addEventListener('pause', this._handlePlayPause);\r\n                this.audio.addEventListener('play', this._handlePlayPause);\r\n                this.audio.addEventListener('ended', this._handleEnded);\r\n            },\r\n        },\r\n        mounted () {\r\n            this.audio = this.$refs.player;\r\n            this.init();\r\n        },\r\n        beforeDestroy () {\r\n            this.audio.removeEventListener('timeupdate', this._handlePlayingUI)\r\n            this.audio.removeEventListener('loadeddata', this._handleLoaded)\r\n            this.audio.removeEventListener('pause', this._handlePlayPause)\r\n            this.audio.removeEventListener('play', this._handlePlayPause)\r\n            this.audio.removeEventListener('ended', this._handleEnded);\r\n        }\r\n\r\n    }\r\n</script>\r\n"]}]}