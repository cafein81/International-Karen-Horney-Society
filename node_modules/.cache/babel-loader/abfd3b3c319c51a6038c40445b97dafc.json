{"remainingRequest":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/thread-loader/dist/cjs.js!/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/babel-loader/lib/index.js!/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vuetify-loader/lib/loader.js!/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vuetify-audio/src/vuetifyaudio.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vuetify-audio/src/vuetifyaudio.vue","mtime":1497519136000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonathandaniels/Documents/tony/karen-horney/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.date.to-iso-string\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar formatTime = function formatTime(secend) {\n  var time = new Date(secend * 1000).toISOString().substr(11, 8);\n  return time;\n};\n\nexport default {\n  name: 'vuetify-audio',\n  props: {\n    file: {\n      type: String,\n      default: null\n    },\n    autoPlay: {\n      type: Boolean,\n      default: false\n    },\n    ended: {\n      type: Function,\n      default: function _default() {}\n    },\n    canPlay: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  computed: {\n    duration: function duration() {\n      return this.audio ? formatTime(this.totalDuration) : '';\n    }\n  },\n  data: function data() {\n    return {\n      isMuted: false,\n      loaded: false,\n      playing: false,\n      paused: false,\n      percentage: 0,\n      currentTime: '00:00:00',\n      audio: undefined,\n      totalDuration: 0\n    };\n  },\n  methods: {\n    setPosition: function setPosition() {\n      this.audio.currentTime = parseInt(this.audio.duration / 100 * this.percentage);\n    },\n    stop: function stop() {\n      this.paused = this.playing = false;\n      this.audio.pause();\n      this.audio.currentTime = 0;\n    },\n    play: function play() {\n      if (this.playing) return;\n      this.paused = false;\n      this.audio.play();\n      this.playing = true;\n    },\n    pause: function pause() {\n      this.paused = !this.paused;\n      this.paused ? this.audio.pause() : this.audio.play();\n    },\n    download: function download() {\n      this.audio.pause();\n      window.open(this.file, 'download');\n    },\n    mute: function mute() {\n      this.isMuted = !this.isMuted;\n      this.audio.muted = this.isMuted;\n      this.volumeValue = this.isMuted ? 0 : 75;\n    },\n    reload: function reload() {\n      this.audio.load();\n    },\n    _handleLoaded: function _handleLoaded() {\n      if (this.audio.readyState >= 2) {\n        if (this.autoPlay) this.audio.play();\n        this.loaded = true;\n        this.totalDuration = parseInt(this.audio.duration);\n      } else {\n        throw new Error('Failed to load sound file');\n      }\n    },\n    _handlePlayingUI: function _handlePlayingUI(e) {\n      this.percentage = this.audio.currentTime / this.audio.duration * 100;\n      this.currentTime = formatTime(this.audio.currentTime);\n    },\n    _handlePlayPause: function _handlePlayPause(e) {\n      if (e.type === 'pause' && this.paused === false && this.playing === false) {\n        this.currentTime = '00:00:00';\n      }\n    },\n    _handleEnded: function _handleEnded() {\n      this.paused = this.playing = false;\n    },\n    init: function init() {\n      this.audio.addEventListener('timeupdate', this._handlePlayingUI);\n      this.audio.addEventListener('loadeddata', this._handleLoaded);\n      this.audio.addEventListener('pause', this._handlePlayPause);\n      this.audio.addEventListener('play', this._handlePlayPause);\n      this.audio.addEventListener('ended', this._handleEnded);\n    }\n  },\n  mounted: function mounted() {\n    this.audio = this.$refs.player;\n    this.init();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.audio.removeEventListener('timeupdate', this._handlePlayingUI);\n    this.audio.removeEventListener('loadeddata', this._handleLoaded);\n    this.audio.removeEventListener('pause', this._handlePlayPause);\n    this.audio.removeEventListener('play', this._handlePlayPause);\n    this.audio.removeEventListener('ended', this._handleEnded);\n  }\n};",{"version":3,"sources":["vuetifyaudio.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAA,UAAA,GAAA,SAAA,UAAA,CAAA,MAAA,EAAA;AACA,MAAA,IAAA,GAAA,IAAA,IAAA,CAAA,MAAA,GAAA,IAAA,EAAA,WAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAAA;AACA,SAAA,IAAA;AACA,CAHA;;AAIA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KATA;AAaA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA;AAbA,GAFA;AAoBA,EAAA,QAAA,EAAA;AACA,IAAA,QAAA,EAAA,oBAAA;AACA,aAAA,KAAA,KAAA,GAAA,UAAA,CAAA,KAAA,aAAA,CAAA,GAAA,EAAA;AACA;AAHA,GApBA;AAyBA,EAAA,IAzBA,kBAyBA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,KADA;AAEA,MAAA,MAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA,KAHA;AAIA,MAAA,MAAA,EAAA,KAJA;AAKA,MAAA,UAAA,EAAA,CALA;AAMA,MAAA,WAAA,EAAA,UANA;AAOA,MAAA,KAAA,EAAA,SAPA;AAQA,MAAA,aAAA,EAAA;AARA,KAAA;AAUA,GApCA;AAsCA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,WAAA,KAAA,CAAA,WAAA,GAAA,QAAA,CAAA,KAAA,KAAA,CAAA,QAAA,GAAA,GAAA,GAAA,KAAA,UAAA,CAAA;AACA,KAHA;AAIA,IAAA,IAJA,kBAIA;AACA,WAAA,MAAA,GAAA,KAAA,OAAA,GAAA,KAAA;AACA,WAAA,KAAA,CAAA,KAAA;AACA,WAAA,KAAA,CAAA,WAAA,GAAA,CAAA;AACA,KARA;AASA,IAAA,IATA,kBASA;AACA,UAAA,KAAA,OAAA,EAAA;AACA,WAAA,MAAA,GAAA,KAAA;AACA,WAAA,KAAA,CAAA,IAAA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,KAdA;AAeA,IAAA,KAfA,mBAeA;AACA,WAAA,MAAA,GAAA,CAAA,KAAA,MAAA;AACA,WAAA,MAAA,GAAA,KAAA,KAAA,CAAA,KAAA,EAAA,GAAA,KAAA,KAAA,CAAA,IAAA,EAAA;AACA,KAlBA;AAmBA,IAAA,QAnBA,sBAmBA;AACA,WAAA,KAAA,CAAA,KAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,KAAA,IAAA,EAAA,UAAA;AACA,KAtBA;AAuBA,IAAA,IAvBA,kBAuBA;AACA,WAAA,OAAA,GAAA,CAAA,KAAA,OAAA;AACA,WAAA,KAAA,CAAA,KAAA,GAAA,KAAA,OAAA;AACA,WAAA,WAAA,GAAA,KAAA,OAAA,GAAA,CAAA,GAAA,EAAA;AACA,KA3BA;AA4BA,IAAA,MA5BA,oBA4BA;AACA,WAAA,KAAA,CAAA,IAAA;AACA,KA9BA;AA+BA,IAAA,aAAA,EAAA,yBAAA;AACA,UAAA,KAAA,KAAA,CAAA,UAAA,IAAA,CAAA,EAAA;AACA,YAAA,KAAA,QAAA,EAAA,KAAA,KAAA,CAAA,IAAA;AACA,aAAA,MAAA,GAAA,IAAA;AACA,aAAA,aAAA,GAAA,QAAA,CAAA,KAAA,KAAA,CAAA,QAAA,CAAA;AACA,OAJA,MAIA;AACA,cAAA,IAAA,KAAA,CAAA,2BAAA,CAAA;AACA;AACA,KAvCA;AAwCA,IAAA,gBAAA,EAAA,0BAAA,CAAA,EAAA;AACA,WAAA,UAAA,GAAA,KAAA,KAAA,CAAA,WAAA,GAAA,KAAA,KAAA,CAAA,QAAA,GAAA,GAAA;AACA,WAAA,WAAA,GAAA,UAAA,CAAA,KAAA,KAAA,CAAA,WAAA,CAAA;AACA,KA3CA;AA4CA,IAAA,gBAAA,EAAA,0BAAA,CAAA,EAAA;AACA,UAAA,CAAA,CAAA,IAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,KAAA,IAAA,KAAA,OAAA,KAAA,KAAA,EAAA;AACA,aAAA,WAAA,GAAA,UAAA;AACA;AACA,KAhDA;AAiDA,IAAA,YAjDA,0BAiDA;AACA,WAAA,MAAA,GAAA,KAAA,OAAA,GAAA,KAAA;AACA,KAnDA;AAoDA,IAAA,IAAA,EAAA,gBAAA;AACA,WAAA,KAAA,CAAA,gBAAA,CAAA,YAAA,EAAA,KAAA,gBAAA;AACA,WAAA,KAAA,CAAA,gBAAA,CAAA,YAAA,EAAA,KAAA,aAAA;AACA,WAAA,KAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,KAAA,gBAAA;AACA,WAAA,KAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,KAAA,gBAAA;AACA,WAAA,KAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,KAAA,YAAA;AACA;AA1DA,GAtCA;AAkGA,EAAA,OAlGA,qBAkGA;AACA,SAAA,KAAA,GAAA,KAAA,KAAA,CAAA,MAAA;AACA,SAAA,IAAA;AACA,GArGA;AAsGA,EAAA,aAtGA,2BAsGA;AACA,SAAA,KAAA,CAAA,mBAAA,CAAA,YAAA,EAAA,KAAA,gBAAA;AACA,SAAA,KAAA,CAAA,mBAAA,CAAA,YAAA,EAAA,KAAA,aAAA;AACA,SAAA,KAAA,CAAA,mBAAA,CAAA,OAAA,EAAA,KAAA,gBAAA;AACA,SAAA,KAAA,CAAA,mBAAA,CAAA,MAAA,EAAA,KAAA,gBAAA;AACA,SAAA,KAAA,CAAA,mBAAA,CAAA,OAAA,EAAA,KAAA,YAAA;AACA;AA5GA,CAAA","sourcesContent":["<template>\r\n    <v-card style=\"text-align: center\">\r\n        <v-card-text>\r\n            <v-btn outline icon class=\"teal--text\" @click.native=\"playing ? pause() : play()\" :disabled=\"loaded === false\">\r\n                <v-icon v-if=\"playing === false || paused === true\">play_arrow</v-icon>\r\n                <v-icon v-else>pause</v-icon>\r\n            </v-btn>\r\n            <v-btn outline icon class=\"teal--text\" @click.native=\"stop()\" :disabled=\"loaded === false\">\r\n                <v-icon>stop</v-icon>\r\n            </v-btn>\r\n            <v-btn outline icon class=\"teal--text\" @click.native=\"mute()\" :disabled=\"loaded === false\">\r\n                <v-icon v-if=\"isMuted === false\">volume_up</v-icon>\r\n                <v-icon v-else>volume_off</v-icon>\r\n            </v-btn>\r\n            <v-btn outline icon class=\"teal--text\" @click.native=\"loaded ? download() : reload()\">\r\n                <v-icon v-if=\"loaded === false\">refresh</v-icon>\r\n                <v-icon v-else>get_app</v-icon>\r\n            </v-btn>\r\n            <v-slider @click.native=\"setPosition()\" v-model=\"percentage\" dark></v-slider>\r\n            <p>{{ currentTime }} / {{ duration }}</p>\r\n        </v-card-text>\r\n        <audio id=\"player\" ref=\"player\" v-on:ended=\"ended\" v-on:canplay=\"canPlay\" :src=\"file\"></audio>\r\n    </v-card>\r\n</template>\r\n<script>\r\n    const formatTime = (secend) => {\r\n        let time = new Date(secend * 1000).toISOString().substr(11, 8)\r\n        return time\r\n    }\r\n    export default {\r\n        name: 'vuetify-audio',\r\n        props: {\r\n            file: {\r\n                type: String,\r\n                default: null\r\n            },\r\n            autoPlay: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            ended: {\r\n                type: Function,\r\n                default: () => {},\r\n            },\r\n            canPlay: {\r\n                type: Function,\r\n                default: () => {},\r\n            },\r\n        },\r\n        computed: {\r\n            duration: function () {\r\n                return this.audio ? formatTime(this.totalDuration) : ''\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isMuted: false,\r\n                loaded: false,\r\n                playing: false,\r\n                paused: false,\r\n                percentage: 0,\r\n                currentTime: '00:00:00',\r\n                audio: undefined,\r\n                totalDuration: 0,\r\n            }\r\n        },\r\n\r\n        methods: {\r\n            setPosition () {\r\n                this.audio.currentTime = parseInt(this.audio.duration / 100 * this.percentage);\r\n            },\r\n            stop () {\r\n                this.paused = this.playing = false\r\n                this.audio.pause()\r\n                this.audio.currentTime = 0\r\n            },\r\n            play () {\r\n                if (this.playing) return\r\n                this.paused = false\r\n                this.audio.play()\r\n                this.playing = true\r\n            },\r\n            pause () {\r\n                this.paused = !this.paused;\r\n                (this.paused) ? this.audio.pause() : this.audio.play()\r\n            },\r\n            download () {\r\n                this.audio.pause()\r\n                window.open(this.file, 'download')\r\n            },\r\n            mute () {\r\n                this.isMuted = !this.isMuted\r\n                this.audio.muted = this.isMuted\r\n                this.volumeValue = this.isMuted ? 0 : 75\r\n            },\r\n            reload () {\r\n                this.audio.load();\r\n            },\r\n            _handleLoaded: function () {\r\n                if (this.audio.readyState >= 2) {\r\n                    if (this.autoPlay) this.audio.play()\r\n                    this.loaded = true\r\n                    this.totalDuration = parseInt(this.audio.duration)\r\n                } else {\r\n                    throw new Error('Failed to load sound file')\r\n                }\r\n            },\r\n            _handlePlayingUI: function (e) {\r\n                this.percentage = this.audio.currentTime / this.audio.duration * 100\r\n                this.currentTime = formatTime(this.audio.currentTime)\r\n            },\r\n            _handlePlayPause: function (e) {\r\n                if (e.type === 'pause' && this.paused === false && this.playing === false) {\r\n                    this.currentTime = '00:00:00'\r\n                }\r\n            },\r\n            _handleEnded () {\r\n                this.paused = this.playing = false;\r\n            },\r\n            init: function () {\r\n                this.audio.addEventListener('timeupdate', this._handlePlayingUI);\r\n                this.audio.addEventListener('loadeddata', this._handleLoaded);\r\n                this.audio.addEventListener('pause', this._handlePlayPause);\r\n                this.audio.addEventListener('play', this._handlePlayPause);\r\n                this.audio.addEventListener('ended', this._handleEnded);\r\n            },\r\n        },\r\n        mounted () {\r\n            this.audio = this.$refs.player;\r\n            this.init();\r\n        },\r\n        beforeDestroy () {\r\n            this.audio.removeEventListener('timeupdate', this._handlePlayingUI)\r\n            this.audio.removeEventListener('loadeddata', this._handleLoaded)\r\n            this.audio.removeEventListener('pause', this._handlePlayPause)\r\n            this.audio.removeEventListener('play', this._handlePlayPause)\r\n            this.audio.removeEventListener('ended', this._handleEnded);\r\n        }\r\n\r\n    }\r\n</script>\r\n"],"sourceRoot":"node_modules/vuetify-audio/src"}]}